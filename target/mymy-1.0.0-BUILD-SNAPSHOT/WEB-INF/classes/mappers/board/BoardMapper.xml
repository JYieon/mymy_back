<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.trip.mymy.mybatis.BoardMapper">
   <resultMap type="com.trip.mymy.dto.BoardDTO" id="BOARD_TB">
      <id property="boardNo" column="BOARD_NUM_PK" />
      <result property="id" column="MEMBER_ID_FK" />
      <result property="title" column="BOARD_TITLE" />
      <result property="content" column="BOARD_CONTENT" />
      <result property="date" column="BOARD_DT"
         javaType="java.sql.Timestamp" />
      <result property="boardOpen" column="BOARD_OPEN" />
      <result property="boardCategory" column="BOARD_CATEGORY" />
      <result property="boardCnt" column="BOARD_CNT" />
      <result property="boardLikes" column="BOARD_LIKES"
         javaType="java.lang.Integer" />
      <result property="repCnt" column="BOARD_REPLY_CNT" />
   </resultMap>

   <resultMap id="REPLY_TB" type="com.trip.mymy.dto.BoardRepDTO">
      <id property="repNo" column="REPLY_NUM_PK" />
      <result property="id" column="MEMBER_ID_FK" />
      <result property="boardNo" column="BOARD_NUM_FK" />
      <result property="repContent" column="REPLY_CONTENT" />
      <result property="parentNo" column="PARENT_NUM" />
      <result property="repDate" column="REPLY_DT"
         javaType="java.sql.Timestamp" />
   </resultMap>

   <!-- 댓글 저장 -->
   <insert id="addReply">
      INSERT INTO REPLY_TB(MEMBER_ID_FK,
      BOARD_NUM_FK, REPLY_CONTENT,PARENT_NUM, REPLY_DT)
      VALUES
      (#{id}, #{boardNo}, #{repContent}, #{parentNo},
      NOW())
   </insert>

   <!-- PARENT_NO(부모 댓글)가 존재하는지 확인 -->
   <select id="checkParentExists" resultType="int">
      SELECT COUNT(*) FROM
      REPLY_TB WHERE REPLY_NUM_PK = #{parentNo}
   </select>

   <!-- 댓글 불러오기 (부모-자식 관계 정렬) -->
   <select id="getRepData" resultMap="REPLY_TB">
      SELECT BOARD_NUM_FK,
      REPLY_NUM_PK, MEMBER_ID_FK, REPLY_CONTENT, PARENT_NUM, REPLY_DT
      FROM
      REPLY_TB
      WHERE BOARD_NUM_FK = #{boardNo}
      ORDER BY CASE WHEN PARENT_NUM = 0
      THEN REPLY_NUM_PK -- 부모 댓글 우선 정렬
      ELSE PARENT_NUM -- 부모 댓글 아래에 배치
      END,
      REPLY_NUM_PK -- 부모 댓글 내에서 정렬
   </select>

   <!-- 댓글 개수 -->
   <update id="updateReplyCnt">
      UPDATE BOARD_TB
      SET BOARD_REPLY_CNT = BOARD_REPLY_CNT +
      #{increment}
      WHERE BOARD_NUM_PK = #{boardNo}
   </update>

   <!-- 특정 댓글의 작성자 ID 조회 -->
   <select id="getReplyWriter" resultType="string">
      SELECT MEMBER_ID_FK FROM
      REPLY_TB WHERE BOARD_NUM_FK = #{replyNo}
   </select>

   <!-- 댓글 삭제 (대댓글도 함께 삭제) -->
   <delete id="deleteReply">
      DELETE FROM REPLY_TB WHERE REPLY_NUM_PK = #{replyNo}
      or PARENT_NUM = #{replyNo}
   </delete>

   <!-- 특정 댓글이 속한 게시글 번호 조회 -->
   <select id="getBoardNoByReplyNo" resultType="int">
      SELECT REPLY_NUM_PK
      FROM REPLY_TB WHERE REPLY_NUM_PK = #{replyNo}
   </select>

   <!-- 게시글 저장 -->
   <!-- <insert id="writeSave"
      parameterType="com.trip.mymy.dto.BoardDTO">
      <selectKey keyProperty="boardNo" resultType="int"
         order="AFTER">
         SELECT BOARD_TB_SEQ.CURRVAL FROM DUAL
      </selectKey>
      INSERT INTO BOARD_TB (MEMBER_ID_FK, BOARD_TITLE,
      BOARD_CONTENT, BOARD_DT, BOARD_OPEN, BOARD_CATEGORY)
      VALUES
      (#{id}, #{title}, #{content}, NOW(),
      #{boardOpen}, #{boardCategory})
   </insert> -->
   <insert id="writeSave" parameterType="com.trip.mymy.dto.BoardDTO">
       INSERT INTO BOARD_TB (MEMBER_ID_FK, BOARD_TITLE, BOARD_CONTENT, BOARD_DT, BOARD_OPEN, BOARD_CATEGORY)
       VALUES (#{id}, #{title}, #{content}, NOW(), #{boardOpen}, #{boardCategory})
       <selectKey keyProperty="boardNo" resultType="int" order="AFTER">
           SELECT LAST_INSERT_ID()
       </selectKey>
   </insert>
   

   <select id="getBoardList" resultMap="BOARD_TB">
      SELECT
      b.BOARD_NUM_PK,
      b.MEMBER_ID_FK,
      b.BOARD_TITLE,
      b.BOARD_CONTENT,
      b.BOARD_DT,
      b.BOARD_OPEN,
      b.BOARD_CATEGORY,
      b.BOARD_CNT,
      COALESCE(l.LIKE_COUNT, 0) AS BOARD_LIKES,
      -- NULL 방지
      COALESCE(r.REPLY_CNT, 0) AS BOARD_REPLY_CNT -- 댓글 개수 추가
      FROM (
      SELECT * FROM BOARD_TB WHERE BOARD_CATEGORY = #{category}
      ) b
      LEFT OUTER
      JOIN (
      SELECT BOARD_NUM_FK, COUNT(*) AS LIKE_COUNT
      FROM LIKE_TB
      GROUP BY
      BOARD_NUM_FK
      ) l ON b.BOARD_NUM_PK = l.BOARD_NUM_FK
      LEFT OUTER JOIN (
      SELECT BOARD_NUM_FK, COUNT(*) AS REPLY_CNT
      FROM REPLY_TB
      GROUP BY
      BOARD_NUM_FK
      ) r ON b.BOARD_NUM_PK = r.BOARD_NUM_FK
      ORDER BY b.BOARD_NUM_PK
      DESC
   </select>



   <select id="getUserBoardList" resultMap="BOARD_TB">
      SELECT * FROM BOARD_TB
      WHERE BOARD_CATEGORY = #{category} AND MEMBER_ID_FK = #{id}
      ORDER BY
      BOARD_NUM_PK DESC
      LIMIT #{limit} OFFSET #{offset}
   </select>

   <!-- 게시글 상세 조회 -->
   <select id="getPost" parameterType="int" resultMap="BOARD_TB">
      SELECT
      BOARD_NUM_PK, MEMBER_ID_FK, BOARD_TITLE,
      REPLACE(BOARD_CONTENT,',',',\n')
      AS BOARD_CONTENT, BOARD_DT,
      BOARD_OPEN,BOARD_CATEGORY, BOARD_CNT, BOARD_LIKES
      FROM BOARD_TB WHERE
      BOARD_NUM_PK = #{boardNo}
   </select>

   <!-- 게시글 조회수 -->
   <update id="boardCnt">
      UPDATE BOARD_TB SET BOARD_CNT = BOARD_CNT+1
      WHERE
      BOARD_NUM_PK = #{boardNo}
   </update>

   <!-- 총 게시글 수 -->
   <select id="getTotalPosts" resultType="int">
      SELECT COUNT(*) FROM
      BOARD_TB WHERE BOARD_CATEGORY = #{category}
   </select>

   <!-- 게시글 수정 -->
   <update id="modify">
      UPDATE BOARD_TB SET BOARD_TITLE=#{title},
      BOARD_CONTENT=#{content}
      WHERE BOARD_NUM_PK=#{boardNo} AND MEMBER_ID_FK
      = #{id}
   </update>

   <!-- 게시글 삭제 -->
   <delete id="deleteBoard" parameterType="int">
      DELETE FROM BOARD_TB
      WHERE BOARD_NUM_PK = #{boardNo}
   </delete>


   <!-- 특정 게시글의 좋아요 수 조회 -->
   <select id="getBoardLikes" resultType="int">
      SELECT COALESCE(COUNT(*),
      0)
      FROM LIKE_TB WHERE BOARD_NUM_FK = #{boardNo}
   </select>

   <!-- 각 id별 좋아요 체크 -->
   <select id="checkUserLike" parameterType="map">
      SELECT COUNT(*) FROM
      LIKE_TB
      WHERE MEMBER_ID_FK = #{id}
      AND BOARD_NUM_FK = #{boardNo}
   </select>

   <!-- 좋아요 추가 -->
   <insert id="addLike" parameterType="map">
      INSERT INTO LIKE_TB
      (MEMBER_ID_FK, BOARD_NUM_FK)
      VALUES (#{id}, #{boardNo})
   </insert>

   <!-- 각 id별 좋아요 삭제 -->
   <delete id="removeLike">
      DELETE FROM LIKE_TB WHERE MEMBER_ID_FK = #{id} AND
      BOARD_NUM_FK = #{boardNo}
   </delete>

   <!-- 특정 게시글의 좋아요 수를 최신화 -->
   <update id="updateBoardLikes" parameterType="int">
      UPDATE BOARD_TB
      SET
      BOARD_LIKES = (SELECT COUNT(*) FROM LIKE_TB
      WHERE BOARD_NUM_FK =
      #{boardNo})
      WHERE BOARD_NUM_PK = #{boardNo}
   </update>

   <!-- 태그 추가 -->
   <insert id="insertTag" parameterType="map">
      INSERT INTO TAG_TB
      (TAG_NAME, TAG_TYPE)
      SELECT #{tagName}, #{tagType}
      FROM TAG_TB
      WHERE NOT EXISTS (SELECT 1 FROM TAG_TB WHERE TAG_NAME = #{tagName})
   </insert>

   <!-- 게시글과 태그 연결 -->
   <insert id="insertBoardTag" parameterType="map">
      INSERT INTO
      BOARD_TAG_TB (BOARD_NUM_FK, TAG_NUM_FK)
      SELECT #{boardNo}, t.TAG_NUM_PK
      FROM TAG_TB t
      WHERE
      t.TAG_NAME = #{tagName} AND NOT EXISTS (SELECT 1
      FROM BOARD_TAG_TB
      WHERE BOARD_NUM_FK = #{boardNo} AND TAG_NUM_FK = t.TAG_NUM_PK)
   </insert>

   <!-- 특정 게시글의 태그 조회 -->
   <select id="getTagsByBoardNo" parameterType="int"
      resultType="string">
      SELECT t.TAG_NAME
      FROM BOARD_TAG_TB bt
      JOIN TAG_TB t ON
      bt.TAG_NUM_FK = t.TAG_NUM_PK
      WHERE bt.BOARD_NUM_FK = #{boardNo}
   </select>

   <!-- 모든 태그와 해당 태그를 포함한 게시글 개수 조회 -->
   <select id="getAllTagsCnt" resultType="map">
      SELECT t.TAG_NAME,
      COUNT(bt.BOARD_NUM_FK) AS TAG_COUNT
      FROM TAG_TB t
      LEFT JOIN BOARD_TAG_TB
      bt ON t.TAG_NUM_PK = bt.TAG_NUM_FK
      GROUP BY t.TAG_NAME
      ORDER BY
      TAG_COUNT DESC
   </select>

   <!-- TAG_TYPE 별 태그 목록 조회 -->
   <select id="getTagsByType" resultType="map">
      SELECT t.TAG_NAME, COUNT(bt.BOARD_NUM_FK) AS TAG_COUNT
      FROM TAG_TB t
      LEFT JOIN BOARD_TAG_TB bt ON t.TAG_NUM_PK = bt.TAG_NUM_FK
      WHERE t.TAG_TYPE = #{tagType}
      GROUP BY t.TAG_NAME
      ORDER BY TAG_COUNT DESC
   </select>



   <!-- 게시글 삭제 시 연결된 태그 삭제 -->
   <delete id="deleteBoardTags" parameterType="int">
      DELETE FROM
      BOARD_TAG_TB
      WHERE BOARD_NUM_FK = #{boardNo}
   </delete>

   <!-- 연결된 게시글이 없는 태그 삭제 -->
   <delete id="cleanupUnusedTags">
      DELETE FROM TAG_TB
      WHERE TAG_NUM_PK NOT IN (
      SELECT
      DISTINCT TAG_NUM_FK FROM BOARD_TAG_TB
      )
   </delete>

   <!-- 검색된 게시글 리스트 조회 -->
   <select id="searchBoardList" resultMap="BOARD_TB">
      SELECT b.BOARD_NUM_PK, b.MEMBER_ID_FK, b.BOARD_TITLE, b.BOARD_CONTENT,
             b.BOARD_DT, b.BOARD_OPEN, b.BOARD_CATEGORY, b.BOARD_CNT,
             b.BOARD_LIKES, m.MEMBER_NICK
      FROM BOARD_TB b
      JOIN MEMBER_TB m ON b.MEMBER_ID_FK = m.MEMBER_ID_PK
      
      <!-- 기록 게시판(2)에서만 해시태그 검색 적용 -->
      <if test="category == 2 and searchType == 'tag'">
          JOIN BOARD_TAG_TB bt ON b.BOARD_NUM_PK = bt.BOARD_NUM_FK
          JOIN TAG_TB t ON bt.TAG_NUM_FK = t.TAG_NUM_PK
      </if>
      
      WHERE b.BOARD_CATEGORY = #{category}
      
      <if test="searchType == 'title'">
          AND b.BOARD_TITLE LIKE CONCAT('%', #{keyword}, '%')
      </if>
      
      <if test="searchType == 'content'">
          AND b.BOARD_CONTENT LIKE CONCAT('%', #{keyword}, '%')
      </if>
      
      <if test="searchType == 'titleContent'">
          AND (b.BOARD_TITLE LIKE CONCAT('%', #{keyword}, '%') OR
               b.BOARD_CONTENT LIKE CONCAT('%', #{keyword}, '%'))
      </if>
      
      <if test="searchType == 'user'">
          AND (b.MEMBER_ID_FK LIKE CONCAT('%', #{keyword}, '%') OR
               m.MEMBER_NICK LIKE CONCAT('%', #{keyword}, '%'))
      </if>
      
      <!-- 기록에서만 태그 검색 허용 -->
      <if test="category == 2 and searchType == 'tag'">
          AND t.TAG_NAME LIKE CONCAT('%', #{keyword}, '%')
      </if>
      
      ORDER BY b.BOARD_NUM_PK DESC
      LIMIT #{limit} OFFSET #{offset}

   </select>


   <!-- 검색된 게시글 수 조회 -->
   <select id="getSearchTotalPosts" resultType="int">
      SELECT COUNT(*)
      FROM BOARD_TB b
      JOIN MEMBER_TB m ON b.MEMBER_ID_FK =
      m.MEMBER_ID_PK

      <!-- 기록에서만 해시태그 검색 적용 -->
      <if test="category == 2 and searchType == 'tag'">
         JOIN BOARD_TAG_TB bt ON b.BOARD_NUM_PK = bt.BOARD_NUM_FK
         JOIN TAG_TB t ON bt.TAG_NUM_FK = t.TAG_NUM_PK
      </if>

      WHERE b.BOARD_CATEGORY = #{category}

      <if test="searchType == 'title'">
         AND b.BOARD_TITLE LIKE '%' || #{keyword} || '%'
      </if>
      <if test="searchType == 'content'">
         AND b.BOARD_CONTENT LIKE '%' || #{keyword} || '%'
      </if>
      <if test="searchType == 'titleContent'">
         AND (b.BOARD_TITLE LIKE '%' || #{keyword} || '%' OR
         b.BOARD_CONTENT LIKE '%' || #{keyword} || '%')
      </if>
      <if test="searchType == 'user'">
         AND (b.MEMBER_ID_FK LIKE '%' || #{keyword} || '%' OR
         m.MEMBER_NICK LIKE '%' || #{keyword} || '%')
      </if>

      <!-- 기록에서만 태그 검색 허용 -->
      <if test="category == 2 and searchType == 'tag'">
         AND t.TAG_NAME LIKE '%' || #{keyword} || '%'
      </if>
   </select>

   <!-- 여행 메이트 게시글 작성 -->
   <!-- <insert id="insertMateBoard"
      parameterType="com.trip.mymy.dto.BoardDTO">
      INSERT 후 BOARD_NO_PK 가져오기
      <selectKey keyProperty="boardNo" resultType="int"
         order="AFTER">
         SELECT BOARD_TB_SEQ.CURRVAL FROM DUAL
      </selectKey>
      INSERT INTO BOARD_TB
      (MEMBER_ID_FK, BOARD_TITLE,
      BOARD_CONTENT, BOARD_DT,
      BOARD_OPEN, BOARD_CNT, BOARD_CATEGORY,
      BOARD_LIKES)
      VALUES (#{id}, #{title}, #{content}, SYSDATE, 1, 0, 3, 0)
   </insert> -->
   <insert id="insertMateBoard" parameterType="com.trip.mymy.dto.BoardDTO">
    <!-- INSERT 후 BOARD_NO_PK 가져오기 -->
       <selectKey keyProperty="boardNo" resultType="int" order="AFTER">
           SELECT LAST_INSERT_ID()
       </selectKey>
       INSERT INTO BOARD_TB
       (MEMBER_ID_FK, BOARD_TITLE, BOARD_CONTENT, BOARD_DT, BOARD_OPEN, BOARD_CNT, BOARD_CATEGORY, BOARD_LIKES)
       VALUES (#{id}, #{title}, #{content}, NOW(), 1, 0, 3, 0)
   </insert>

   <!-- 여행 메이트 게시글 목록 조회 -->
   <select id="getMateBoardList" resultMap="BOARD_TB">
      SELECT * FROM BOARD_TB
      WHERE BOARD_CATEGORY = 3
      ORDER BY BOARD_NUM_PK DESC
      OFFSET #{offset} ROWS
      FETCH NEXT #{limit} ROWS ONLY
   </select>

   <!-- 여행 메이트 상세페이지 -->
   <select id="getMateBoardDetail" parameterType="int"
      resultMap="BOARD_TB">
      SELECT * FROM BOARD_TB
      WHERE BOARD_NUM_PK = #{boardNo} AND
      BOARD_CATEGORY = 3
   </select>

   <!-- 여행 메이트 게시글 수정 -->
   <update id="modifyMateBoard">
      UPDATE BOARD_TB SET BOARD_TITLE=#{title},
      BOARD_CONTENT=#{content}
      WHERE BOARD_NUM_PK=#{boardNo} AND
      BOARD_CATEGORY=3
   </update>

   <!-- 여행 메이트 게시글 삭제 -->
   <delete id="deleteMateBoard">
      DELETE FROM BOARD_TB WHERE BOARD_NUM_PK = #{boardNo}
      AND BOARD_CATEGORY=3
   </delete>

   <!-- 여행 메이트 게시글 목록 조회 -->
   <select id="searchMateBoardList" resultMap="BOARD_TB">
      SELECT * FROM BOARD_TB
      WHERE BOARD_CATEGORY = #{category}
      <if test="searchType == 'title'">
         AND BOARD_TITLE LIKE #{keyword}
      </if>
      <if test="searchType == 'content'">
         AND BOARD_CONTENT LIKE #{keyword}
      </if>
      <if test="searchType == 'titleContent'">
         AND (BOARD_TITLE LIKE #{keyword} OR BOARD_CONTENT LIKE
         #{keyword})
      </if>
      ORDER BY BOARD_NO_PK DESC
      OFFSET #{offset} ROWS FETCH NEXT #{limit}
      ROWS ONLY
   </select>


   <!-- 검색된 여행 메이트 게시글 수 조회 -->
   <select id="getSearchMateTotalPosts" resultType="int">
      SELECT COUNT(*)
      FROM BOARD_TB
      WHERE BOARD_CATEGORY = 3
      <if test="searchType == 'title'">
         AND BOARD_TITLE LIKE '%' || #{keyword} || '%'
      </if>
      <if test="searchType == 'content'">
         AND BOARD_CONTENT LIKE '%' || #{keyword} || '%'
      </if>
      <if test="searchType == 'titleContent'">
         AND (BOARD_TITLE LIKE '%' || #{keyword} || '%' OR
         BOARD_CONTENT LIKE '%' || #{keyword} || '%')
      </if>
   </select>

</mapper>